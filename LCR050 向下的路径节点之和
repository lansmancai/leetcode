public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
       this.val = val;
       this.left = left;
       this.right = right;
      }
 }
public class Solution {

    static int count;
    static TreeNode root;

    public int pathSum(TreeNode root, int targetSum) {
        dfs(root, targetSum);
        return count;
    }

    public void dfs(TreeNode root, int targetSum) {
        if(root == null) return;
        count(root, 0, targetSum);
        if(root.left != null) dfs(root.left, targetSum);
        if(root.right != null) dfs(root.right, targetSum);
    }

    public void count(TreeNode root, int path, int targetSum) {
        if(root == null) return;
        path += root.val;
        if(path == targetSum) {
            count++;
        }
        if(root.left != null) {
            count(root.left, path, targetSum);
        }
        if(root.right != null) {
            count(root.right, path, targetSum);
        }
    }
    public void buildTree(String[] tns) {
        TreeNode[] tnarray = new TreeNode[tns.length];
        for(int i = 0; i < tns.length; i++){
            if(tns[i] == "null") {
                tnarray[i] = null;
            }
            else {
                tnarray[i] = new TreeNode(Integer.valueOf(tns[i]));
            }
        }
        int p = 0;
        int q = 1;
        for( ; q + 1 < tns.length; p++) {
            if(tnarray[p] == null) continue;
            tnarray[p].left = tnarray[q];
            tnarray[p].right = tnarray[q + 1];
            q += 2;
        }
        if (q == tns.length - 1) {
            tnarray[p + 1].left = tnarray[q];
        }
        root = tnarray[0];
    }
    public static void main(String[] args) {
        //String[] tns = {"10", "5", "-3", "3", "2", "null", "11", "3", "-2", "null", "1"};
        String[] tns = {"5", "4", "8", "11", "null", "13", "4", "7", "2", "null", "null", "5", "1"};
        Solution st = new Solution();
        st.buildTree(tns);
        System.out.println(st.pathSum(root, 15));
    }

}

//上述代码可用哈希表进一步优化，减少计算
class Solution {
public int pathSum(TreeNode root, int sum) {
    Map<Long, Integer> map = new HashMap<>();
    map.put(0L, 1);

    return dfs(root, sum, map, 0L);
}

private int dfs(TreeNode root, int sum,
    Map<Long, Integer> map, long path) {
    if (root == null) {
        return 0;
    }

    path += root.val;
    int count = map.getOrDefault(path - sum, 0);
    map.put(path, map.getOrDefault(path, 0) + 1);

    count += dfs(root.left, sum, map, path);
    count += dfs(root.right, sum, map, path);

    map.put(path, map.get(path) - 1);

    return count;
}
}

