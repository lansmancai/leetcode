import java.util.Arrays;
import java.util.Stack;

class Solution {
    public int largestRectangleArea(int[] heights) {
        if(heights.length == 1) return heights[0];
        if(heights.length == 2) return Math.max(Math.max(heights[0], heights[1]), Math.min(heights[0], heights[1]) * 2);

        int maxArea = -1;
        Stack<Integer> stack = new Stack<Integer>();
        for(int i = 0; i < heights.length; i++) {
            if(stack.isEmpty() || heights[i] > heights[stack.peek()]) {
                stack.push(i);
                continue;
            }
            while(heights[i] < heights[stack.peek()]) {
                int tmp = stack.pop();
                if(stack.isEmpty()) {
                    maxArea = Math.max(maxArea, heights[tmp] * i);
                    break;
                }
                else {
                    maxArea = Math.max(maxArea, heights[tmp] * (i - stack.peek() - 1));
                }
            }
                stack.push(i);
        }

        while(!stack.isEmpty()) {
            int stacktmp = stack.pop();
            if(stack.isEmpty()) {
                maxArea = Math.max(maxArea, heights[stacktmp] * heights.length);
            }
            else {
                maxArea = Math.max(maxArea, heights[stacktmp] * (heights.length - stack.peek() - 1));
            }
        }

        return maxArea;
    }
    public static void main(String[] args) {
        Solution st = new Solution();
        int[] heights = {0, 1, 0, 1};
        System.out.println(st.largestRectangleArea(heights));
    }
}
