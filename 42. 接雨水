求解接雨水体积，
这里存在个数学逻辑，每一列的雨水体积=左右最高柱子的最小值-自己的高度（如果是负数则舍弃，正数则累加），证明很容易，铁桶短板原理
暴力解法是遍历每个柱子，每次都求出它左右最高两个柱子高度后尝试累加，时间复杂度为n的平方
使用动态规划的方式先把每个柱子左右做高的高度给算出来再运算，可将复杂度优化到n
        int len = heights.length;
        if(len <= 2) return 0; //如果柱子不到3个，是没有凹槽的 直接返回0
        int[] left = new int[len];//保存每个柱子左边最高的高度
        int[] right = new int[len];//保存每个柱子右边最高的高度

        left[0] = -1;//-1代表自己是左边尽头
        left[1] = heights[0];
        int leftmaxtemp = heights[0];

        for (int i = 2; i < len; i++) {
            left[i] = Math.max(leftmaxtemp, heights[i - 1]);
            leftmaxtemp = left[i];
        }

        right[len - 1] = -1;//-1代表自己是右边尽头
        right[len - 2] = heights[len - 1];
        int rightmaxtemp = heights[len - 1];

        for(int j = len - 3; j >= 0; j--) {
            right[j] = Math.max(rightmaxtemp, heights[j + 1]);
            rightmaxtemp = right[j];
        }
        System.out.println(Arrays.toString(left));
        System.out.println(Arrays.toString(right));

使用单调栈的方式复杂度也是n，但空间，运算步骤明显比上述的要少，这里实践起来有个难点就是如果height[i]和height[i+1]高度一致，是否要进行特殊处理，
经过推演，发现不用，height[i]和height[i+1]高度一致的 直接入栈即可，height[i+1]>height[i]的 说明出现了凹槽计算体积并出栈保持height[i+1]<=height[i]
计算凹槽一行的方式：栈顶为凹槽底部高度，弹出后 新的栈顶为凹槽左侧，height[i+1]则为凹槽右侧，计算后再比较 直到维持单调栈的顺序，代码要注意栈为空的情况。
右侧和左侧比较过程中 发现和左侧也就是栈顶一样高度的 也不用处理 直接处理下一个。经过验证 逻辑可行
class Solution {
    public int trap(int[] height) {
        int len = height.length;
        if(len <= 2) return 0;

        int size = 0;
        Stack<Integer> stack = new Stack<Integer>();
        stack.push(0);

        for(int i = 1; i < len; i++) {
            if(height[i] <= height[stack.peek()]) {
                stack.push(i);
            }
            else {
                while(!stack.isEmpty() && height[i] > height[stack.peek()]) {
                    int mid = height[stack.peek()];
                    stack.pop();
                    if(!stack.isEmpty()) {
                        size += (Math.min(height[i], height[stack.peek()]) - mid) * (i - stack.peek() -1);

                    }
                }
                stack.push(i);
            }
        }
        return size;
    }
}
