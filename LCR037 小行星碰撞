import java.util.Arrays;
import java.util.Stack;

class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        /*
        Stack<Integer> stack = new Stack<Integer>();
        for(int asteroid : asteroids) {
            if(stack.isEmpty() || stack.peek() < 0 || (stack.peek() > 0 && asteroid > 0)) {
                stack.push(asteroid);
                continue;
            }
            while(stack.peek() > 0 && asteroid < 0) {
                if (stack.peek() + asteroid < 0) {
                    stack.pop();
                    if (stack.isEmpty() || stack.peek() < 0) {
                        stack.push(asteroid);
                        break;
                    }
                } else if (stack.peek() + asteroid > 0) {
                    break;
                } else {
                    stack.pop();
                    break;
                }
            }
        }
        return stack.stream().mapToInt(i->i).toArray();
         */
        Stack<Integer> stack = new Stack<>();
        for (int as : asteroids) {
            while (!stack.empty() && stack.peek() > 0 && stack.peek() < -as) {
                stack.pop();
            }

            if (!stack.empty() && as < 0 && stack.peek() == -as) {
                stack.pop();
            } else if (as > 0 || stack.empty() || stack.peek() < 0) {
                stack.push(as);
            }
        }

        return stack.stream().mapToInt(i->i).toArray();
    }
    public static void main(String[] args) {
        Solution st = new Solution();
        int[] nums = {-2, -2, 1, -2};
       System.out.println(Arrays.toString(st.asteroidCollision(nums)));
    }
}
