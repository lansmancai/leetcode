import java.util.Random;

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int max = 0;
        for(int pile : piles) {
            if(pile > max) {
                max = pile;
            }
        }
        int left = 1;
        int right = max;
        int mid = 0;
        while(left <= right) {
            mid = (left + right) / 2;
            if(countHourSum(piles, mid) > h) {
                left = mid + 1;
            }
            else {
                if(mid - 1 == 0 || countHourSum(piles, mid - 1) > h) {
                    return mid;
                }
                right = mid - 1;
            }
        }
        return mid;
    }
    public int countHourSum(int[] piles, int k) {
        int sum = 0;
        for(int pile : piles) {
            sum += countHour(pile, k);
        }
        return sum;
    }
    public int countHour(int pile, int k) {
        int basic = pile / k;
        int remain = pile % k;
        if(remain > 0) {
            return basic + 1;
        }
        return basic;
    }

    public static void main(String[] args) {
        Solution st = new Solution();
        int[] piles = {3, 6, 7 ,11};
        System.out.println(st.minEatingSpeed(piles, 8));
    }
}
