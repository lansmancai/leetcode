import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (i1, i2) -> i1[0] - i2[0]);
        List<int[]> merged = new LinkedList<>();
        int[] temp = {intervals[0][0], intervals[0][1]};

        for(int j = 1; j < intervals.length; j++) {
            if(intervals[j][0] > temp[1]) {
                merged.add(new int[]{temp[0], temp[1]});
                temp[0] = intervals[j][0];
                temp[1] = intervals[j][1];
            }
            else {
                temp[1] = Math.max(temp[1], intervals[j][1]);
            }
        }
        merged.add(new int[]{temp[0], temp[1]});
        int[][] result = new int[merged.size()][];
        return merged.toArray(result);
    }
    public static void main(String[] args) {
        Solution st = new Solution();
        int[][] nums = {{8,10},{1,3},{15,18},{2,6}};
        System.out.println(Arrays.deepToString(st.merge(nums)));
    }
}
